@import "_helper-functions";

/// TO add new constant breakpoint copy the below code for respective mixins change the required values and place them accordingly

/// In for-media() mixin
/// @else if $media-type == '{breakpoint-name}'{
///		$media-{breakpoint-name}: map-merge($media-{breakpoint-name}, ($selector: $rules)) !global;
///	}

/// In apply-media-css()
/// @else if $bp == ${breakpoint-name}{
/// 	@include generate-css-for($bp, $media-{breakpoint-name});
/// }


/// @since v1.5
/// To apply media-queries to constant screen widths
@mixin for-media($media-type, $selector, $rules){

	@if $media-type == 'container'{
		$media-container: map-merge($media-container, ($selector: $rules)) !global;
	} 
	@else if $media-type == 'xl'{
		$media-xl: map-merge($media-xl, ($selector: $rules)) !global;
	}
	@else if $media-type == 'lg'{
		$media-lg: map-merge($media-lg, ($selector: $rules)) !global;
	}
	@else if $media-type == 'md'{
		$media-md: map-merge($media-md, ($selector: $rules)) !global;
	}
	@else if $media-type == 'sm'{
		$media-sm: map-merge($media-sm, ($selector: $rules)) !global;
	}
	@else if $media-type == 'xs'{
		$media-xs: map-merge($media-xs, ($selector: $rules)) !global;
	}
	@else{
		@error "#{$media-type} Does not exists in config.";
	}
}

/// @since v1.0
/// To apply media queries to dynamic screen widths.
@mixin for-screen($width, $selector, $rules){
	@if index($breakpointsList, $width) == null {
		$breakpointsList: append($breakpointsList, $width) !global;
	} 

	$existing-rules: ();
	 @if map-has-key($media-for, $width){
		$existing-rules: map-get($media-for, $width);
	}
	$existing-rules: map-merge($existing-rules, ($selector: $rules));	
	$media-for: map-merge($media-for, ($width: $existing-rules)) !global;
}

/// @since v1.0
/// To dump all media-queries in css file.
@mixin apply-media-css(){
	$breakpointsList: quick-sort($breakpointsList) !global;

	@each $bp in $breakpointsList{
		@if $bp == $container-width{
			@include generate-css-for($bp, $media-container);
		} 
		@else if $bp == $xl{
			@include generate-css-for($bp, $media-xl);
		}
		@else if $bp == $lg{
			@include generate-css-for($bp, $media-lg);
		} 
		@else if $bp == $md{
			@include generate-css-for($bp, $media-md);
		}
		@else if $bp == $sm{
			@include generate-css-for($bp, $media-sm);
		} 
		@else if $bp == $xs{
			@include generate-css-for($bp, $media-xs);
		} 
		@else{
			@if $media-for != () {
				@include generate-css-for($bp, map-get($media-for, $bp));
			}
		}
	}
}

/// @since v1.0
/// Generates media-queries for breakpoints.
/// Called internally by mixin apply-media-css()
@mixin generate-css-for($screen, $css-props){
	@if $css-props != (){
		$console-msg: console('Generating media-queries for: ' + $screen);
	
		$width-type: max;
		@if $screen < 0px{
			$width-type: min;
			$screen: abs($screen);
		}
		
		@media screen and (#{$width-type}-width: #{$screen}) {
			@each $selector, $rules in $css-props{
				#{$selector}{
					@each $property, $value in $rules{
						#{$property}: #{$value};
					}
				}
			}
		}

	}
}